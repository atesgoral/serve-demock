#!/usr/bin/env node

var commander = require('commander'),
    path = require('path'),
    express = require('express'),
    bodyParser = require('body-parser'),
    morgan = require('morgan'),
    demock = require('demock-express'),
    fs = require('fs'),
    extend = require('node.extend');

var defaults = {
    root: '.',
    jsonPath: '',
    port: 3000
};

var args = commander
    .version(require('../package.json').version)
    .usage('[options] [root directory]')
    .option('-j, --json-path <path>', 'specify the relative path to mock JSON data []', String)
    .option('-p, --port <port>', 'specify the port [3000]', Number)
    .option('-i, --ignore-mime', 'ignore MIME type')
    .parse(process.argv);

if (commander.args.length) {
    args.root = commander.args.shift();
}

var localConfig = {};

try {
    var localConfigFilePath = __dirname + '/.demock-server';
    localConfig = JSON.parse(fs.readFileSync(localConfigFilePath, 'utf8'));
    console.log('\033[90mUsing ' + localConfigFilePath);
} catch (e) {} // @todo catch bad json and log

var config = extend(true, {}, defaults, localConfig, {
    root: args.root,
    jsonPath: args.jsonPath,
    port: args.port
});

var root = path.resolve(config.root || '.');

var app = express();

var staticOptions = {
    redirect: false,
    setHeaders: function (res) {
        res.setHeader('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
    }
};

var demockOptions = {
    jsonPath: config.jsonPath,
    ignoreMime: config.ignoreMime
};

app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(morgan('\033[96m:method\033[0m :url', { immediate: true }));
app.use(morgan('\033[90m-->\033[0m \033[96m:method\033[0m :url \033[96m:status\033[0m :response-time(ms)', { immediate: false }));
app.use(demock(express.static(root, staticOptions), demockOptions));

app.listen(config.port, function () {
    console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', root, config.port);
});
