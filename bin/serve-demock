#!/usr/bin/env node

var commander = require('commander'),
    resolve = require('path').resolve,
    express = require('express'),
    bodyParser = require('body-parser'),
    morgan = require('morgan'),
    demock = require('demock-express');

commander
    .version(require('../package.json').version)
    .usage('[options] [root directory]')
    .option('-j, --json-path <path>', 'specify the relative path to mock JSON data [/]', String, '/')
    .option('-p, --port <port>', 'specify the port [3000]', Number, 3000)
    .option('-i, --ignore-mime', 'ignore MIME type')
    .parse(process.argv);

var root = resolve(commander.args.shift() || '.');

var app = express();

var staticOptions = {
    redirect: false,
    setHeaders: function (res) {
        res.setHeader('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
    }
};

app.use(bodyParser.urlencoded({ extended: false }));
app.use(morgan(':method :url', { immediate: true }));
app.use(morgan('--> :method :url :status :response-time', { immediate: false }));
app.use(demock({
    jsonPath: commander.jsonPath,
    ignoreMime: commander.ignoreMime, 
    static: {
        root: root,
        options: staticOptions
    }
}));
app.use(express.static(path, staticOptions));

app.listen(commander.port, function () {
    console.log('\033[90mserving \033[36m%s\033[90m on port \033[96m%d\033[0m', path, commander.port);
});
